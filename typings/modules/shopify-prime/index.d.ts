// Generated by typings
// Source: https://raw.githubusercontent.com/nozzlegear/node-fetch.d.ts/6abf724/node-fetch.d.ts
declare module '~shopify-prime~node-fetch/node-fetch' {
// Modified from source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/587f9d9cb018514c03434ccc0fc53ffcad32e8b7/isomorphic-fetch/isomorphic-fetch.d.ts

enum RequestContext {
    "audio", "beacon", "cspreport", "download", "embed", "eventsource",
    "favicon", "fetch", "font", "form", "frame", "hyperlink", "iframe",
    "image", "imageset", "import", "internal", "location", "manifest",
    "object", "ping", "plugin", "prefetch", "script", "serviceworker",
    "sharedworker", "subresource", "style", "track", "video", "worker",
    "xmlhttprequest", "xslt"
}
enum RequestMode { "same-origin", "no-cors", "cors" }
enum RequestCredentials { "omit", "same-origin", "include" }
enum RequestCache {
    "default", "no-store", "reload", "no-cache", "force-cache",
    "only-if-cached"
}
enum ResponseType { "basic", "cors", "default", "error", "opaque" }
    
namespace fetch 
{
    type HeaderInit = IHeaders | Array<string>;
    type BodyInit = ArrayBuffer | ArrayBufferView | Blob | FormData | string;
    type RequestInfo = IRequest | string;

    interface RequestInit {
        method?: string;
        headers?: HeaderInit | { [index: string]: string };
        body?: BodyInit;
        mode?: string | RequestMode;
        credentials?: string | RequestCredentials;
        cache?: string | RequestCache;
    }

    interface IHeaders {
        new() : IHeaders;
        append(name: string, value: string): void;
        delete(name: string):void;
        get(name: string): string;
        getAll(name: string): Array<string>;
        has(name: string): boolean;
        set(name: string, value: string): void;
    }

    interface IBody {
        new() : IBody;
        bodyUsed: boolean;
        arrayBuffer(): Promise<ArrayBuffer>;
        blob(): Promise<Blob>;
        formData(): Promise<FormData>;
        json(): Promise<any>;
        json<T>(): Promise<T>;
        text(): Promise<string>;
    }

    interface IRequest extends IBody {
        new(input: string | IRequest, init?: RequestInit): IRequest;
        method: string;
        url: string;
        headers: IHeaders;
        context: string | RequestContext;
        referrer: string;
        mode: string | RequestMode;
        credentials: string | RequestCredentials;
        cache: string | RequestCache;
    }

    interface IResponse extends IBody {
        url: string;
        status: number;
        statusText: string;
        ok: boolean;
        headers: IHeaders;
        type: string | ResponseType;
        size: number;
        timeout: number;
        redirect(url: string, status: number): IResponse;
        error(): IResponse;
        clone(): IResponse;
    }
    
    interface FetchStatic
    {
        RequestContext: RequestContext;
        RequestMode: RequestMode;
        RequestCredentials: RequestCredentials;
        RequestCache: RequestCache;
        ResponseType: ResponseType;
        Promise: any;
        Headers: IHeaders
        Request: IRequest;
        Response: IResponse;
        (url: string | IRequest, init?: RequestInit): Promise<IResponse>;
    }
}

var fetch: fetch.FetchStatic;

export = fetch;
}
declare module '~shopify-prime~node-fetch' {
import alias = require('~shopify-prime~node-fetch/node-fetch');
export = alias;
}

// Generated by typings
// Source: node_modules/shopify-prime/dist/modules/base_service.d.ts
declare module '~shopify-prime/dist/modules/base_service' {
import * as fetch from '~shopify-prime~node-fetch';
export class BaseService {
    private shopDomain;
    private accessToken;
    private resource;
    constructor(shopDomain: string, accessToken: string, resource: string);
    static buildDefaultHeaders(): fetch.IHeaders;
    setCredentials(shopDomain: string, accessToken: string): void;
    createRequest<T>(method: "GET" | "POST" | "PUT" | "DELETE", path: string, rootElement?: string, payload?: Object): Promise<T>;
}
export interface FieldOptions {
    /**
     * Restricts the result to only the fields specified.
     */
    fields?: string[];
}
export interface ListOptions extends FieldOptions {
    /**
     * Restricts results to those created after the given id.
     */
    since_id?: number;
}
}
declare module 'shopify-prime/dist/modules/base_service' {
import alias = require('~shopify-prime/dist/modules/base_service');
export = alias;
}

// Generated by typings
// Source: node_modules/shopify-prime/dist/modules/charges.d.ts
declare module '~shopify-prime/dist/modules/charges' {
import { BaseService, FieldOptions, ListOptions } from '~shopify-prime/dist/modules/base_service';
/**
 * A service for manipulating Shopify's ApplicationCharge API.
 */
export class Charges extends BaseService {
    constructor(shopDomain: string, accessToken: string);
    /**
     * Creates a new charge.
     */
    create(charge: Charge): Promise<Charge>;
    /**
     * Gets a charge with the given id.
     * @param id The id of the charge to get.
     * @param options Options for filtering the result.
     */
    get(id: number, options?: FieldOptions): Promise<Charge>;
    /**
     * Retrieves a list of all past and present charges.
     * @param options Options for filtering the result.
     */
    list(options?: ListOptions): Promise<Charge[]>;
    /**
     * Activates a charge. Can only be activated if the charge's status is "accepted".
     * @param id The id of the charge to activate.
     */
    activate(id: number): Promise<void>;
}
/**
 * Represents a one-time application charge.
 */
export interface Charge {
    /**
     * The URL that the customer should be sent to, to accept or decline the application charge.
     */
    confirmation_url?: string;
    /**
     * The date and time when the application charge was created.
     */
    created_at?: string;
    /**
     * The name of the application charge, e.g. "Super Expensive One-time Charge".
     */
    name: string;
    /**
     * The price of the application charge. Note: Shopify returns this value as a string.
     */
    price: string | number;
    /**
     * The URL the customer is sent to once they accept/decline a charge.
     */
    return_url?: string;
    /**
     * The status of the charge.
     */
    status?: "pending" | "accepted" | "active" | "cancelled" | "declined" | "expired";
    /**
     * Whether or not the application charge is a test transaction.
     */
    test?: boolean;
    /**
     * The date and time when the recurring application charge was last updated.
     */
    updated_at?: string;
}
}
declare module 'shopify-prime/dist/modules/charges' {
import alias = require('~shopify-prime/dist/modules/charges');
export = alias;
}

// Generated by typings
// Source: node_modules/shopify-prime/dist/modules/shopify_error.d.ts
declare module '~shopify-prime/dist/modules/shopify_error' {
import { IResponse } from '~shopify-prime~node-fetch';
export class ShopifyError extends Error {
    body: {
        errors: string | {
            [index: string]: string | string[];
        };
    };
    constructor(response: IResponse, body: {
        errors: string | {
            [index: string]: string | string[];
        };
    });
    isShopifyPrime: boolean;
    statusCode: number;
    statusText: string;
    errors: {
        [index: string]: string[];
    };
}
}
declare module 'shopify-prime/dist/modules/shopify_error' {
import alias = require('~shopify-prime/dist/modules/shopify_error');
export = alias;
}

// Generated by typings
// Source: node_modules/shopify-prime/dist/modules/recurring_charges.d.ts
declare module '~shopify-prime/dist/modules/recurring_charges' {
import { Charge } from '~shopify-prime/dist/modules/charges';
import { BaseService, FieldOptions, ListOptions } from '~shopify-prime/dist/modules/base_service';
/**
 * A service for manipulating Shopify's RecurringCharge API.
 */
export class RecurringCharges extends BaseService {
    constructor(shopDomain: string, accessToken: string);
    /**
     * Creates a new charge.
     */
    create(charge: RecurringCharge): Promise<RecurringCharge>;
    /**
     * Gets a charge with the given id.
     * @param id The id of the charge to get.
     * @param options Options for filtering the result.
     */
    get(id: number, options?: FieldOptions): Promise<RecurringCharge>;
    /**
     * Retrieves a list of all past and present charges.
     * @param options Options for filtering the result.
     */
    list(options?: ListOptions): Promise<RecurringCharge[]>;
    /**
     * Activates a charge. Can only be activated if the charge's status is "accepted".
     * @param id The id of the charge to activate.
     */
    activate(id: number): Promise<void>;
    /**
     * Deletes a charge.
     * @param id The id of the charge to delete.
     */
    delete(id: number): Promise<void>;
}
/**
 * Represents a recurring (e.g. monthly subscription) application charge.
 */
export interface RecurringCharge extends Charge {
    /**
     * The date and time the customer activated the charge. Will be null if the charge has not been activated.
     */
    activated_on?: string;
    /**
     * The date and time the customer will be billed. Will be null if the charge has not been activated.
     */
    billing_on?: string;
    /**
     * The date and time the customer cancelled their recurring charge. Will be null if the charge has not been cancelled.
     */
    cancelled_on?: string;
    /**
     * Number of days the customer is eligible for a free trial.
     */
    trial_days: number;
    /**
     * The date and time the customer's free trial ends. Will be null if the charge has not been activated.
     */
    trial_ends_on?: string;
}
}
declare module 'shopify-prime/dist/modules/recurring_charges' {
import alias = require('~shopify-prime/dist/modules/recurring_charges');
export = alias;
}

// Generated by typings
// Source: node_modules/shopify-prime/dist/index.d.ts
declare module '~shopify-prime/dist/index' {
import { BaseService, ListOptions, FieldOptions } from '~shopify-prime/dist/modules/base_service';
export { BaseService, ListOptions, FieldOptions };
export { Charges, Charge } from '~shopify-prime/dist/modules/charges';
export { ShopifyError } from '~shopify-prime/dist/modules/shopify_error';
export { RecurringCharges, RecurringCharge } from '~shopify-prime/dist/modules/recurring_charges';
export type AuthScope = ("read_content" | "write_content" | "read_themes" | "write_themes" | "read_products" | "write_products" | "read_customers" | "write_customers" | "read_orders" | "write_orders" | "read_script_tags" | "write_script_tags" | "read_fulfillments" | "write_fulfillments" | "read_shipping" | "write_shipping");
/**
 * Determines if an incoming page request is authentic.
 * @param querystring The collection of querystring parameters from the request.
 * @param shopifySecretKey Your app's secret key.
 * @returns a boolean indicating whether the request is authentic or not.
 */
export function isAuthenticRequest(querystring: {
    [index: string]: any;
}, shopifySecretKey: string): Promise<boolean>;
/**
 * Determines if an incoming proxy page request is authentic.
 * @param querystring The collection of querystring parameters from the request.
 * @param shopifySecretKey Your app's secret key.
 * @returns a boolean indicating whether the request is authentic or not.
 */
export function isAuthenticProxyRequest(querystring: {
    [index: string]: any;
}, shopifySecretKey: string): Promise<boolean>;
/**
 * Determines if an incoming webhook requeset is authentic.
 * @param headers Either an object containing the request's headers, or the X-Shopify-Hmac-SHA256 header string itself.
 * @param requestBody The entire request body as a string.
 * @param shopifySecretKey Your app's secret key.
 * @returns a boolean indicating whether the request is authentic or not.
 */
export function isAuthenticWebhook(headers: {
    [index: string]: any;
} | string, requestBody: string, shopifySecretKey: string): Promise<boolean>;
/**
 * A convenience function that tries to ensure that a given URL is a valid Shopify store by checking the response headers for X-ShopId. This is an undocumented feature, use at your own risk.
 */
export function isValidShopifyDomain(shopifyDomain: string): Promise<boolean>;
/**
 * Builds an authorization URL for Shopify OAuth integration. Send your user to this URL where they'll be asked to accept installation of your Shopify app.
 * @param scopes An array of scope permissions that your app will need from the user.
 * @param shopifyDomain The user's Shopify URL.
 * @param shopifyApiKey Your app's API key. This is NOT your secret key.
 * @param redirectUrl An optional URL that the user will be sent to after integration. Override's the Shopify app's default redirect URL.
 * @param state An optional, random string value provided by your application which is unique for each authorization request. During the OAuth callback phase, your application should check that this value matches the one you provided to this method.
 */
export function buildAuthorizationUrl(scopes: AuthScope[], shopifyDomain: string, shopifyApiKey: string, redirectUrl?: string, state?: string): Promise<string>;
/**
 * Finalizes app installation, generating a permanent access token for the user's store.
 * @param code The authorization code generated by Shopify, which should be a parameter named 'code' on the request querystring.
 * @param shopifyDomain The store's Shopify domain, which should be a parameter named 'shop' on the request querystring.
 * @param shopifyApiKey Your app's public API key.
 * @param shopifySecretKey Your app's secret key.
 * @returns The access token.
 */
export function authorize(code: string, shopDomain: string, shopifyApiKey: string, shopifySecretKey: string): Promise<string>;
}
declare module 'shopify-prime/dist/index' {
import alias = require('~shopify-prime/dist/index');
export = alias;
}
declare module 'shopify-prime' {
import alias = require('~shopify-prime/dist/index');
export = alias;
}
